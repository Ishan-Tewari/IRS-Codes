# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SotP1Fp4tD-JfUs_YPpcsmCRzdc0hzpw
"""

import numpy as np
from flask import Flask,render_template,request

app = Flask(__name__)
import pickle as pkl
X = pkl.load(open("X.pkl","rb"))
tfidf = pkl.load(open("model.pkl","rb"))

import nltk
from nltk import sent_tokenize
from nltk import word_tokenize
nltk.download('punkt')

nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer


stopwords = stopwords.words('english')
porter = PorterStemmer()

def preprocess(text):
  # removing punctuations
    import string
    punc = string.punctuation
    for c in text:
      if c in punc:
        text = text.replace(c,"")
    # print(text)

    # tokenization
    words = word_tokenize(text)
    # print("After tokenization: {}".format(words))

    # stop words removal
    clean_words=[]
    for word in words:
      if word not in stopwords:
        clean_words.append(word)

    words = clean_words
    # print("After stop words removal: {}".format(words))

    # stemming
    stemmed_words = []
    for word in words:
      stemmed_words.append(porter.stem(word))

    words = stemmed_words
    # print("After stemming: {}".format(words))

    # converting to lowercase
    lowercase_words = []
    for word in words:
      lowercase_words.append(word.lower())

    words = lowercase_words
    # print("After converting to lowecase: {}".format(words))

    #adding to processed docs
    processed_text = ' '.join(map(str, words))

    return processed_text

from sklearn.metrics.pairwise import cosine_similarity


def searchQuery(k, query):
  processed_query = preprocess(query)
  query_vec = tfidf.transform([processed_query])

  cosine_values = cosine_similarity(X,query_vec)
  cosine_values = cosine_values.reshape((-1,))

  results = []
  cosine_sorted_index = cosine_values.argsort()[-k:][::-1]

  # print(cosine_sorted_index)
  for i in cosine_sorted_index:
      if cosine_values[i] >= 0.01:
          results.append(('p3_d{}.txt'.format(i+1),'{:.2f}'.format(cosine_values[i])))

  return results



@app.route('/')
def home():
  return render_template('index.html')

@app.route('/search',methods=['POST'])
def search():
  inputSearch = [str(x) for x in request.form.values()]
  query = inputSearch[0]
  results = searchQuery(10,query)
  content = []
  for result in results:
    if (result[1] != 0):
      with open(result[0],'r',encoding='utf-8') as file:
          text = file.read()
          text = str(text)
      content.append(text)

  if not content:
    return render_template('index.html',content="No Results Found!")
  return render_template('index.html',content=results)

if __name__ == "__main__":
  app.run(debug=True)

